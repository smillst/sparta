<!--
  This is an Ant build file for compiling SPARTA!
-->
<project name="sparta-code" default="jar" basedir=".">

    <description>
      This is SPARTA!
    </description>

    <property environment="env"/>

    <property file="build.${os.name}.properties"/>
    <property file="build.properties"/>

    <!-- Check whether android.home or ANDROID_HOME is set -->
    <fail message="Neither android.home nor ANDROID_HOME is set!">
        <condition>
            <and>
                <not> <isset property="android.home"/> </not>
                <not> <isset property="env.ANDROID_HOME"/> </not>
            </and>
        </condition>
    </fail>

    <!-- Use the environment variable, if nothing was set yet. -->
    <property name="android.home" value="${env.ANDROID_HOME}"/>

    <!-- Determine newest android platform installed on the machine -->
    <path id="android.latest.platform">
      <last>
            <sort>
          <!--
           This doesn't handle the sort like one would expect. android-8 would be a higher version than android-19.
           Thus we restrict it to a range we know is lexicographically correct.
          -->
                <dirset dir="${android.home}/platforms" includes="android-??" />
            </sort>
      </last>
    </path>

    <!-- require at least android 15 -->
    <fail message="SPARTA! requires and Android SDK, version ${android.version.min} or higher.">
      <condition>
    <not> <matches pattern="${android.version.allowed}" string="${toString:android.latest.platform}"/> </not>
      </condition>
    </fail>

    <!-- cross platform paths for android -->
    <path id="libs.android">
      <pathelement location="${toString:android.latest.platform}/android.jar"/>
      <pathelement location="${android.home}/extras/android/support/v7/appcompat/libs/android-support-v4.jar"/>
    </path>

    <pathconvert property="latestAndroid.jar" refid="libs.android"/>

    <property name="src" value="src"/>
    <property name="flow.stubfiles" value="src/sparta/checkers/flowstubfiles"/>
    <property name="flow.astub" value="src/sparta/checkers/information_flow.astub"/>
    <property name="flow.astub.intents" value="src/sparta/checkers/intents"/>

    <property name="annotated.intent.receivers" value="annotated-intent-receivers"/>

    <property name="tests" value="tests"/>
    <property name="stub.jar" value="tests/stubfile/stub.jar"/>

    <property name="build" value="build"/>
    <property name="build.tests" value="tests/build"/>
    <property name="build.reports" value="${build}/reports"/>

    <property name="compiler.version.goal" value="javac 1.7.0-jsr308-${jsr308.version}"/>

    <property name="run.tests.should.fork" value="true"/>
    <property name="halt.on.test.failure" value="true"/>

    <condition property="jdkName" value="jdk7.jar" else="jdk6.jar">
        <contains string="${java.version}" substring="1.7"/>
    </condition>

    <target name="merge-stubfiles" description= "Merge stubfiles in src/sparta/checkers/flowstubfiles/ into information_flow.astub">
        <concat destfile="${flow.astub}">
             <fileset dir="${flow.stubfiles}" includes="*.astub"/>
        </concat>

        <copy file="${flow.astub}" todir="${flow.astub.intents}"/>
    </target>

    <target name="prep" depends="merge-stubfiles" description="Create required directories">
        <mkdir dir="${build}"/>
        <mkdir dir="${build.tests}"/>
        <mkdir dir="${build.tests}/testclasses"/>

        <java fork="true"
              outputproperty="compiler.version"
              jar="${checkers.lib}">
          <arg line="-version"/>
        </java>

        <property name="compiler.exists" value="false"/>
        <condition property="compiler.exists">
           <equals
             arg1="${compiler.version}"
             arg2="${compiler.version.goal}"/>
        </condition>
    </target>

    <target name="clean" description="Remove generated files">
        <delete dir="${build}"/>
        <delete dir="${build.reports}"/>
        <delete dir="${sparta.jar.file}"/>
        <delete dir="sparta-out"/>
        <delete dir="testOutput"/>
        <delete dir="bin"/>
        <delete failonerror="false">
            <fileset dir="${build.tests}" includes="**/*.class"/>
        </delete>
    </target>

    <target name="build.check.uptodate"
            description="Set properties: filesets and build.uptodate">
        <fileset id="src.files" dir="${src}">
            <include name="**/*.java"/>
            <exclude name="checkers/util/dist/**"/>
        </fileset>
        <fileset id="src.astub.files" dir="${src}" includes="**/*.properties,**/*.astub"/>

        <!-- I can't figure out how to combine filesets (or even selectors)
             to get just one *.uptodate property, so do them individually
             and then combine with <condition>. -->
        <!-- Probably should depend on a file rather than a directory. -->
        <uptodate property="src.files.uptodate">
          <srcfiles refid="src.files"/>
          <mapper type="glob" from="*.java" to="../${build}/*.class"/>
        </uptodate>

        <uptodate property="src.astub.files.uptodate">
          <srcfiles refid="src.astub.files"/>
          <mapper type="glob" from="*" to="../${build}/*"/>
        </uptodate>

        <condition property="build.uptodate">
          <and>
            <isset property="src.files.uptodate"/>
            <isset property="src.astub.files.uptodate"/>
          </and>
        </condition>
        <!--
        <echo message="src.files.uptodate: ${src.files.uptodate}"/>
        <echo message="src.astub.files.uptodate: ${src.astub.files.uptodate}"/>
        <echo message="javaparser.lib.uptodate: ${javaparser.lib.uptodate}"/>
        <echo message="build.uptodate: ${build.uptodate}"/>
        -->
    </target>

    <target name="build" depends="prep,build.check.uptodate" unless="build.uptodate"
            description="Compile files.  Does not update sparta.jar">
        <fail unless="compiler.exists"
            message="
Needed version ${compiler.version.goal} of the JSR 308 compiler,
but found version ${compiler.version} on your classpath.
${line.separator}${line.separator}
Check that the 'checkers.lib' property in 'build.properties' points to version
${build.version} of the 'javac.jar' library."/>

        <copy todir="${build}" preservelastmodified="true">
            <fileset refid="src.astub.files"/>
        </copy>

        <pathconvert pathsep=" " property="src.files.spaceseparated">
            <path>
                <fileset dir="${src}">
                    <include name="**/*.java"/>
                </fileset>
                <fileset dir="${annotated.intent.receivers}">
                    <include name="**/*.java"/>
                </fileset>
            </path>
        </pathconvert>

    <!-- since we are manually forming the path, we need to make it cross platform -->
    <path id="libs.external.deps">
      <pathelement location="${checkers.lib}"/>
      <pathelement location="${junit.jar}"/>
      <pathelement location="${hamcrest.lib}"/>
      <pathelement location="${gson.jar}"/>
      <pathelement location="${latestAndroid.jar}"/>
    </path>

    <pathconvert property="libs.external.deps.platformpath" refid="libs.external.deps"/>

        <java fork="true"
              failonerror="true"
              jar="${checkers.lib}">
            <arg line="-cp ${libs.external.deps.platformpath}" />
            <arg value="-g"/>
            <!-- Make sure we only have Java 7 source code and generate Java 7 bytecode. -->
            <arg value="-source"/>
            <arg value="7"/>
            <arg value="-target"/>
            <arg value="7"/>
            <!-- To not get a warning about bootstrap classpath -->
            <arg value="-Xlint:-options"/>
            <arg line="-sourcepath ${src}"/>
            <arg line="-d ${build}"/>
            <arg line="${src.files.spaceseparated}"/>
            <arg line="-version"/>
        </java>
        <!--
        Touch doesn't work on a directory, so can't do:
           <touch file="${build}"/>
        Instead, create and remove a file, which modifies the directory.
        -->
        <touch file="${build}/.timestamp"/>
        <delete file="${build}/.timestamp"/>
    </target>

    <!-- This creates sparta.jar -->
    <target name="jar" depends="build,validate-stubfiles"
            description="Create jar file">
        <delete dir="${build.reports}"/>
        <jar destfile="${sparta.jar.file}" basedir="${build}" excludes="tests/">
            <manifest>
                <attribute name="Implementation-Version" value="0.9.9"/>
                <attribute name="Implementation-URL" value="http://types.cs.washington.edu/sparta/"/>
            </manifest>
        </jar>

    </target>
    <target name="jar-nostubs" depends="build"
            description="Create jar file">
        <delete dir="${build.reports}"/>
        <jar destfile="${sparta.jar.file}" basedir="${build}"/>
    </target>

    <target name="validate-stubfiles" depends="build" description="Show stubfile errors">
        <delete file="${build}/Test.class"/>

      <path id="libs.stubfiletests">
    <pathelement location="${build}"/>
    <pathelement location="${latestAndroid.jar}"/>
      </path>

      <pathconvert property="libs.stubfiletests.deps" refid="libs.stubfiletests"/>

        <java fork="true"
            jar="${checkers.lib}"
            failonerror="true" >
            <arg line="-cp ${libs.stubfiletests.deps}" />
            <arg value="-g"/>
            <arg line="-d ${build}"/>
            <arg line="-AstubWarnIfNotFound"/>
            <arg line="-processor sparta.checkers.FlowChecker" />
            <!-- Arbitrary file to compile. -->
            <arg line="${tests}/Test.java" />
        </java>
        <delete file="${build}/Test.class"/>
    </target>

    <target name="build-intent-tests" depends="build" description="Compiles intent
        receivers Java classes with the IntentChecker.">
        <delete dir="${build}/tests"/>

        <path id="libs.stubfiletests">
            <pathelement location="${build}"/>
            <pathelement location="${latestAndroid.jar}"/>
        </path>

        <pathconvert pathsep=" " property="intent.java.classes.spaceseparated">
            <path>
                <fileset dir="${tests}">
                    <include name="**/intentreceivers/*.java"/>
                </fileset>
            </path>
        </pathconvert>

      <pathconvert property="libs.stubfiletests.deps" refid="libs.stubfiletests"/>

        <java fork="true"
            jar="${checkers.lib}"
            failonerror="true" >
            <arg line="-cp ${libs.stubfiletests.deps}" />
            <arg value="-g"/>
            <arg line="-d ${build}"/>
            <arg line="-processor sparta.checkers.intents.IntentChecker" />
            <arg line="${intent.java.classes.spaceseparated}"/>
        </java>

    </target>

    <target name="build-tests" depends="prep" description="Compile tests">
        <fail unless="compiler.exists"
            message="
Version ${build.version} of the JSR 308 compiler was not found on your
classpath.
${line.separator}${line.separator}
Check that the 'checkers.lib' property in 'build.properties' points to version
${build.version} of the 'javac.jar' library."/>
        <pathconvert pathsep=" " property="src.tests">
            <path>
                <fileset dir="${tests}">
                    <include name="src/tests/*.java"/>
                </fileset>
            </path>
        </pathconvert>
        <echo message="-cp ${build}:${checkers.lib}:${junit.jar}:${hamcrest.lib}:${gson.jar}"/>
        <java fork="true"
              failonerror="true"
              jar="${checkers.lib}">
            <arg line="-cp ${build}:${checkers.lib}:${junit.jar}:${hamcrest.lib}:${gson.jar}" />
            <arg value="-g"/>
            <!-- Make sure we only have Java 7 source code and generate Java 7 bytecode. -->
            <arg value="-source"/>
            <arg value="7"/>
            <arg value="-target"/>
            <arg value="7"/>
            <!-- To not get a warning about bootstrap classpath -->
            <arg value="-Xlint:-options"/>
            <arg line="-sourcepath ${tests}"/>
            <arg line="-d ${build.tests}"/>
            <arg line="${src.tests}"/>
        </java>
    </target>

    <!-- Per the <test> element, output goes to ${build.reports} -->
    <target name="-run-tests" description="Generalized test runner">
        <mkdir dir="${build.reports}"/>

        <condition property="should.emit.debug.str" value="true" else="false">
            <isset property="emit.test.debug"/>
        </condition>

        <condition property="debugger.str" value="-Xnoagent -Djava.compiler=NONE -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005" else="">
            <isset property="debugger.on"/>
        </condition>

        <junit fork="${run.tests.should.fork}"
            dir="${basedir}"
            printsummary="true"
            haltonfailure="${halt.on.test.failure}">
            <!-- Don't put everything on the bootclasspath, as that would
                 cause class loading issues. -->
            <jvmarg line="-Xbootclasspath/p:${checkers}/checker/dist/javac.jar"/>
            <jvmarg line="-ea"/>
            <jvmarg line="${debugger.str}"/>
            <sysproperty key="JDK_JAR" value="${basedir}/dist/${jdkName}"/>
            <sysproperty key="emit.test.debug" value="${should.emit.debug.str}"/>

            <classpath>
                <pathelement path="${checkers.lib}"/>
                <pathelement path="${junit.jar}"/>
                <pathelement path="${hamcrest.lib}"/>
                <pathelement path="${gson.jar}"/>
                <pathelement path="${build.tests}"/>
                <pathelement path="${build}"/>
                <pathelement path="${latestAndroid.jar}"/>
                <pathelement path="${stub.jar}"/>
            </classpath>

            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>

            <test name="${testclass}" todir="${build.reports}"/>
        </junit>
    </target>

    <!-- Make sure to add all individual tests as dependency. -->
    <target name="all-tests" depends="jar,build-tests,build-intent-tests,permissions-tests,report-tests,flow-tests,flow-policy-tests,fenum-tests, stubfile-tests, strict-tests, intent-tests, param-flow-tests, not-reviewed-tests, reflection-tests"
      description="Run tests for all checkers"/>

    <target name="all-tests-nostubs" depends="jar,build-tests,build-intent-tests,permissions-tests,report-tests,flow-tests,flow-policy-tests,fenum-tests, strict-tests, intent-tests, param-flow-tests, not-reviewed-tests, reflection-tests"
      description="Run tests for all checkers -- execpt for the stub file tests"/>

    <target name="all-tests-not-intents" depends="jar,build-tests,build-intent-tests,permissions-tests,report-tests,flow-tests,flow-policy-tests,fenum-tests, stubfile-tests, strict-tests, param-flow-tests, not-reviewed-tests,  reflection-tests"
      description="Run tests for all checkers"/>
    <target name="not-reviewed-tests" depends="jar,build-tests"
      description="Run tests for the Not Reviewed Library Checker">
        <antcall target="-run-tests">
            <param name="testclass" value="tests.AndroidTests$NotReviewedLibraryCheckerTests"/>
        </antcall>
    </target>

    <target name="permissions-tests" depends="jar,build-tests"
      description="Run tests for the Permissions Checker">
        <antcall target="-run-tests">
            <param name="testclass" value="tests.AndroidTests$AndroidPermissionsCheckerTests"/>
        </antcall>
    </target>

    <target name="report-tests" depends="jar,build-tests"
      description="Run tests for the Android Report Checker">
        <antcall target="-run-tests">
            <param name="testclass" value="tests.AndroidTests$AndroidReportCheckerTests"/>
        </antcall>
    </target>

    <target name="flow-tests" depends="jar,build-tests"
      description="Run tests for the Flow Checker">
        <antcall target="-run-tests">
            <param name="testclass" value="tests.AndroidTests$FlowCheckerTests"/>
        </antcall>
    </target>

        <target name="reflection-tests" depends="jar,build-tests"
      description="Run tests for the Flow Checker with reflection resolution enabled">
        <antcall target="-run-tests">
            <param name="testclass" value="tests.AndroidTests$ReflectionFlowCheckerTests"/>
        </antcall>
    </target>

    <target name="intent-tests" depends="jar,build-tests,build-intent-tests"
      description="Run tests for the Intent Checker">
        <antcall target="-run-tests">
            <param name="testclass" value="tests.AndroidTests$IntentCheckerTests"/>
        </antcall>
    </target>

    <target name="flow-policy-tests" depends="jar,build-tests"
            description="Run tests for the Flow Checker">
        <antcall target="-run-tests">
            <param name="testclass" value="tests.AndroidTests$FlowPolicyTests"/>
        </antcall>
    </target>

    <target name="fenum-tests" depends="jar,build-tests"
      description="Run tests for the Android Fenum Checker">
        <antcall target="-run-tests">
            <param name="testclass" value="tests.AndroidTests$AndroidFenumCheckerTests"/>
        </antcall>
    </target>

    <target name="stubfile-tests" depends="jar,build-tests"
      description="Run tests for the Flow Checker">
        <antcall target="-run-tests">
            <param name="testclass" value="tests.AndroidTests$StubfileTests"/>
        </antcall>
    </target>
    <target name="param-flow-tests" depends="jar,build-tests"
      description="Run tests for the Flow Checker">
        <antcall target="-run-tests">
            <param name="testclass" value="tests.AndroidTests$ParameterizedFlowCheckerTests"/>
        </antcall>
    </target>
    <target name="strict-tests" depends="jar,build-tests"
      description="Run tests for the Flow Checker">
        <antcall target="-run-tests">
            <param name="testclass" value="tests.AndroidTests$FlowStrictTests"/>
        </antcall>
    </target>
    <target name="tags" depends="prep" description="Create Emacs TAGS table">
        <exec executable="sh" failonerror="true">
            <arg value="-c"/>
            <arg value="etags `find . \( -name jdk \) -prune -o -name '*.java' -print | sort-directory-order`"/>
        </exec>
    </target>


</project>
